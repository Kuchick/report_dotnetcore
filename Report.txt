ASP.NET Core конфигурация

//////////////////1) Различия

Если говорить про конфигурацию приложения в контексте "старой версии" -
ASP.NET MVC 5 то в ней мы могли с помощью класса WebConfigurationManager 
из пространства System.Web.Configuration, который мог извлекать конфигурационную
информацию из файла в ходе выполнения приложения.
При этом файлы конфигурации могли содержать привычные секции, которые с помощью методы
GetSection мы могли извлекать. Или например строки подключения для работы с DB.
Кроме доступа к файлу конфигурации веб-приложения, мы могли получать конфигурацию указанную для веб-сервера.

Как мы можем заметить этот инструмент не слишком удобен для рядового использования.
Он был скорее предназначен для специальных инструментов вроде Web Site Admin Tool(WAT)


=============


Конфигурация же приложения ASP.NET Core представляет из себя объект реализующий интерфейс IConfiguration или же IConfigurationRoot.
 Данный класс хранит в себе все конфигурационные настройки в виде словаря(набор "ключ-значение").
 Как и большинство новых классов, наш находится в пространстве имён Microsoft. А конкретно Microsoft.Extention.Configuration.

Данный пакет позволяет хранить настройки приложения в памяти сервера.
Кроме этого можно хранить настройки конфигурации во внешнем файле в любом удобном формате - json/ini/xml.
Для каждого из способов есть собственный пакет:
1) in memory - Microsoft.Extensions.Configuration 
2) json - Microsoft.Extensions.Configuration.Json
3) Считывать параметры налету работы сервера из коммандной строки -
Microsoft.Extensions.Configuration.CommandLine
4) ini - Microsoft.Extensions.Configuration.Ini
5) Microsoft.Extensions.Configuration.Xml

////////////2 Создаём конфигурацию

Изначально проект ASP.NET Core не содержит файлов конфигурации и настроен
на сохранение конфигурации в памяти сервера, а сама конфигурация задаётся в 
стартовом файле приложения.

1] Делаем собственную конфигурацию.
Для этого сначала нам необходимо установить Microsoft.Extensions.Configuration
о котором говорилось ранее
Для этого либо установим его через менеджер пакетов NuGet
или же просто пропишем строку зависимости(!!!! ЭТО ДЕЛАЙ) в файл project.json

"dependencies": {
    "Microsoft.Extensions.Configuration": "*", //Это не копируй просто пропиши в 
    // самом верху.
    Звёздочка означает что мы хотим использовать самую новую стабильную версию.
}

Сохраним файл и подождём пока пакет установится сам.

После этого перейдём в файл Statup.cs
и пропишем код (**1**)

-> Вот прям сюда смотри
Теперь мы можем использовать конфигурацию обратившись к нужной настройке по ключу
string message = MyAppConfig["message"]

Покажем что всё работает в **2**

Так же мы можем использовать несколько источников конфигурации в приложении
НО ХОТЯБЫ 1 ТОЧНО ДОЛЖЕН БЫТЬ ЕСЛИ МЫ ЭТО ЯВНО УКАЗЫВАЕМ САМИ

2] Создадим файл конфигурации JSON
Очень удобно использовать конфигурацию в памяти для того чтобы иметь быстрый доступ к самым необходимым ключам-значениям.
Но перегружать память чем попало не стоит, мы будем использовать для не самых необходимых конфигураций файл JSON
Как правило в ASP.NET Core приложениях используются json файлы, так как сам фреймворк
работает с ними нет смысла держать зоопарк из разных видов файлов.

Для работы с JSON файлами необходимо будет добавить пакет 
Microsoft.Extension.Configuration.Json

По аналогии с предыдущим примером пропишем зависимости в файле
project.json

"dependencies": {
    "Microsoft.Extensions.Configuration": "*", //Предыдущий пример
    "Microsoft.Extensions.Configuration.Json": "*", //Наша зависимость
     
    // остальные зависимости
}

После загрузки добавим в проект файл myappconfig.json

Удалим всё стандартное содержимое в виде строки подключения и добавим своё содержимое

...

НЕ ЗАБЫВАЕМ УКАЗАТЬ .SetBasePath(env.ContentRootPath)
иначе не найдёт файл!


3] Работы с конфигурацией

Так же как и при работе со предыдущей версией фреймворка мы имеем набор методов
для работы с конфигурацией
1) Метод GetSection(string name) возвращает объект IConfiguration которые
представляет конфигурацию определенной секции
2) Метод GetChildren()
возвращает коллекцию IConfiguration текущего объекта конфигурации
3) GetReloadToken() возвращает токен IChangeToken который уведомляет нас
при изменении конфигурации
4) GetConnectionString(string name) возвращает секцию со строкой подключения
и просто является более выразительным способом чем GetSection("connectionstring")[name]
5) Индексатор [string key] который позволяет получить доступ по определённому ключу
к хранимому в словаре значению


* запускаем и после запуска сообщаем что файл конфигурации может считываться не последовательно по строкам,
а в порядке сортировки - именно для этого цифры в начале строки

4] Создание провайдера конфигурации
Для работы с конфигурационными файлами у нас из коробки(не считая установки пакетов)
есть несколько готовых провайдеров - для работы с json/xml/ini

Однако возможно в некоторых случаях нам может потребоваться работать с собственным форматом файла конфигурации

Чтобы пользоваться такой возможностью мы должны сами реализовать собственный
провайдер конфигурации.

Создание своего собственного формата конфигурации заставляет нам использовать
3 компонентна:
1) IConfigurationSource - определяет наш источник конфигурации
2) ConfigurationProvider - сам провайдер конфигурации
3) И некоторый класс-помошник, который будет содержать метод расширения к объекту
IConfiguration

/////